name: Build

on:
  pull_request:
  push:
    branches:
    - master
    tags:
    - v*

jobs:
  vulnerability-scan:
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        sdk: [5.0-focal, 3.1-bionic]
    runs-on: ubuntu-latest
    name: scan-vulnerabilities/${{ matrix.sdk }}
    container: mcr.microsoft.com/dotnet/sdk:${{ matrix.sdk }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Scan for Vulnerabilities
      run: |
        dotnet tool restore
        dotnet restore
        dotnet tool run dotnet-retire
  build-dotnet:
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        framework: [netcoreapp3.1, net5.0, net48]
        os: [ubuntu-latest]
        test: [""]
        configuration: [release]
        docker-tag: ['ci']
    runs-on: ${{ matrix.os }}
    name: build-${{ matrix.os }}/${{ matrix.framework }}/EventStore.ClientAPI${{ matrix.test }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - shell: bash
      run: |
        git fetch --prune --unshallow
    - name: Github Registry Docker Login
      uses: azure/docker-login@v1
      with:
        login-server: docker.pkg.github.com/eventstore
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Pull EventStore Image
      shell: bash
      run: |
        docker pull docker.pkg.github.com/eventstore/eventstore/eventstore:${{ matrix.docker-tag }}
    - name: Install netcoreapp3.1
      uses: actions/setup-dotnet@v1
      if: matrix.framework == 'netcoreapp3.1'
      with:
        dotnet-version: 3.1.x
    - name: Install net5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Compile
      shell: bash
      run: |
        dotnet build --configuration ${{ matrix.configuration }} --framework ${{ matrix.framework }} src/EventStore.ClientAPI${{ matrix.test }}
    - name: Run Tests
      shell: bash
      env:
        ES_DOCKER_TAG: ${{ matrix.docker-tag }}
      run: |
        ./gencert.sh
        dotnet test --configuration ${{ matrix.configuration }} --blame \
          --logger:html --logger:"console;verbosity=normal" \
          --results-directory=$(pwd)/test-results/test/EventStore.ClientAPI${{ matrix.test }}.Tests \
          --framework ${{ matrix.framework }} \
          test/EventStore.ClientAPI${{ matrix.test }}.Tests
    - name: Collect Test Results
      shell: bash
      if: always()
      run: |
        echo $(find ./test-results -name "*.html" | xargs cat) > test-results.html
    - name: Publish Test Results (HTML)
      uses: actions/upload-artifact@v1
      if: always()
      with:
        path: test-results.html
        name: test-results-${{ matrix.configuration }}-${{ matrix.os }}-${{ matrix.framework }}-EventStore.ClientAPI${{ matrix.test }}.html
  publish:
    timeout-minutes: 5
    needs: [vulnerability-scan, build-dotnet]
    runs-on: ubuntu-latest
    name: publish
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Get Version
      id: get_version
      run: | 
        echo "::set-output name=branch::${GITHUB_REF:10}"
        
        dotnet tool restore
        version=$(dotnet tool run minver -- --tag-prefix=v)
        echo "::set-output name=version::${version}"
    - shell: bash
      run: |
        git fetch --prune --unshallow
    - name: Install netcoreapp3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Install net5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Dotnet Pack
      shell: bash
      run: |
        dotnet pack /p:Version=${{ steps.get_version.outputs.version }} --configuration=Release --output=./packages \
          /p:NoWarn=NU5105 \
          /p:RepositoryUrl=https://github.com/EventStore//EventStoreDB-Client-Dotnet-Legacy \
          /p:RepositoryType=git
    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        path: packages
        name: nuget-packages
    - name: Dotnet Push to Github Packages
      shell: bash
      if: github.event_name == 'push'
      run: |
        dotnet tool restore
        find . -name "*.nupkg" | xargs -n1 dotnet tool run gpr -- push --api-key=${{ secrets.github_token }}
    - name: Dotnet Push to Nuget.org
      shell: bash
      if: contains(steps.get_version.outputs.branch, 'v')
      run: |
        dotnet tool restore
        find . -name "*.nupkg" | xargs -n1 dotnet nuget push --api-key=${{ secrets.nuget_key }} --source https://api.nuget.org/v3/index.json
